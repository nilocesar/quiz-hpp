{"version":3,"sources":["useFirebase.js"],"names":["async","getDocumentsOrderedByField","collectionDB","fieldName","querySnapshot","empty","orderBy","get","console","log","results","let","id","data","doc","push","error","updateIfGreater","docRef","user","questions","then","catch","exists","update","set","listenToUpdates","collection","isInitialLoad","onSnapshot","snapshot","docChanges","change","call","addOrUpdateDocument","forEach","name","email","informativo","uid","err","empresa","initFirebase","ready","window","firebaseApp","firestore","handlerFormDB","handlerGameDB","bridge","listRankingDB","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","$","document","firebase","initializeApp","handlerSnapshotFormDB"],"mappings":"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","file":"useFirebase.js","sourcesContent":["window.firebaseConfig = {\n  apiKey: \"AIzaSyDCWHDPHJzNm5IfRi34C2mh-HYh_r8_kX8\",\n  authDomain: \"astrazeneca-hpp.firebaseapp.com\",\n  projectId: \"astrazeneca-hpp\",\n  storageBucket: \"astrazeneca-hpp.firebasestorage.app\",\n  messagingSenderId: \"482866735777\",\n  appId: \"1:482866735777:web:dbecff22deb11aa9835ee0\",\n};\n\nasync function getDocumentsOrderedByField(collectionDB, fieldName) {\n  try {\n    const querySnapshot = await collectionDB.orderBy(fieldName, \"desc\").get();\n\n    if (querySnapshot.empty) {\n      console.log(\"No matching documents.\");\n      return [];\n    }\n\n    let results = [];\n    querySnapshot.forEach((doc) => {\n      results.push({\n        id: doc.id,\n        data: doc.data(),\n      });\n    });\n\n    return results;\n  } catch (error) {\n    console.error(\"Error retrieving documents: \", error);\n    return [];\n  }\n}\n\nfunction updateIfGreater(docRef, user, questions) {\n  try {\n    docRef\n      .get()\n      .then((doc) => {\n        if (doc.exists) {\n          console.log(\"update\", docRef);\n          docRef\n            .update({\n              ...user,\n              ...questions,\n            })\n            .then(() => {\n              console.log(\"Document successfully update!\");\n            })\n            .catch((error) => {\n              console.error(\"Error update: \", error);\n            });\n        } else {\n          console.log(\"set\", docRef);\n          docRef\n            .set({\n              ...user,\n              ...questions,\n            })\n            .then(() => {\n              console.log(\"Document successfully written!\");\n            })\n            .catch((error) => {\n              console.error(\"Error writing document: \", error);\n            });\n        }\n      })\n      .catch((error) => {\n        console.log(\"Error set:\", error);\n      });\n  } catch (error) {\n    console.error(\"Erro ao adicionar ou atualizar documento: \", error);\n  }\n}\n\nfunction listenToUpdates(collection, call) {\n  let isInitialLoad = true;\n\n  collection.onSnapshot(\n    (snapshot) => {\n      if (isInitialLoad) {\n        // Ignorar o primeiro snapshot, que é o estado inicial da coleção\n        isInitialLoad = false;\n        return;\n      }\n\n      snapshot.docChanges().forEach((change) => {\n        if (change.type === \"added\") {\n          console.log(\"New document: \", change.doc.data());\n          call(change);\n        }\n        if (change.type === \"modified\") {\n          console.log(\"Modified document: \", change.doc.data());\n          call(change);\n        }\n      });\n    },\n    (err) => {\n      console.log(`Encountered error: ${err}`);\n    }\n  );\n}\n\nfunction addOrUpdateDocument(docRef, data) {\n  try {\n    docRef\n      .get()\n      .then((doc) => {\n        if (doc.exists) {\n          console.log(\"update\", docRef);\n          docRef\n            .update({\n              name: data.name,\n              email: data.email,\n              empresa: data.empresa,\n              informativo: data.informativo,\n              uid: data.uid,\n            })\n            .then(() => {\n              console.log(\"Document successfully update!\");\n            })\n            .catch((error) => {\n              console.error(\"Error update: \", error);\n            });\n        } else {\n          console.log(\"set\", docRef);\n          docRef\n            .set({\n              name: data.name,\n              email: data.email,\n              empresa: data.empresa,\n              informativo: data.informativo,\n              uid: data.uid,\n            })\n            .then(() => {\n              console.log(\"Document successfully written!\");\n            })\n            .catch((error) => {\n              console.error(\"Error writing document: \", error);\n            });\n        }\n      })\n      .catch((error) => {\n        console.log(\"Error set:\", error);\n      });\n  } catch (error) {\n    console.error(\"Erro ao adicionar ou atualizar documento: \", error);\n  }\n}\n\n///Inicialização do Firebase\nwindow.initFirebase = false;\n$(document).ready(function () {\n  if (!window.initFirebase) {\n    const firebaseApp = firebase.initializeApp(window.firebaseConfig);\n    window.db = firebaseApp.firestore();\n    window.collectionDB = window.db.collection(\"usuarios\");\n    window.initFirebase = true;\n    console.log(\"confirmado\", window.collectionDB);\n  }\n});\n\n/// Criação do formulario\nbridge.handlerFormDB = function (data) {\n  const docRef = window.collectionDB.doc(data.email);\n  addOrUpdateDocument(docRef, data);\n};\n\n/// Criação da nota do game\nbridge.handlerGameDB = function (user, questions) {\n  const docRef = window.collectionDB.doc(user.email);\n  updateIfGreater(docRef, user, questions);\n};\n\n/// Criação da Ranking\nbridge.listRankingDB = function (call) {\n  getDocumentsOrderedByField(window.collectionDB, \"maior\")\n    .then((results) => {\n      console.log(\"Documents ordered by field in descending order:\");\n      call(results);\n    })\n    .catch((error) => {\n      console.error(\"Error in getDocumentsOrderedByField: \", error);\n    });\n};\n\n/// Controle do formulário via realtime - para mobile\nbridge.handlerSnapshotFormDB = function (call) {\n  listenToUpdates(window.collectionDB, call);\n};\n"]}