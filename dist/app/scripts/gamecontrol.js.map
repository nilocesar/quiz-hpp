{"version":3,"sources":["gamecontrol.js"],"names":["getObjectFromLocalStorage","key","jsonString","localStorage","getItem","JSON","parse","checkAndSaveOrUpdateObject","storageKey","newData","data","storedObject","console","stringify","setItem","fullscreen","$","bridge","fullScreen","setupInactivityChecker","interval","onInactive","let","timeout","startTimer","setTimeout","log","resetTimer","on","clear","clearLocalStorage","document","ready","e","user","handlerGameDB","questions","next","navigate"],"mappings":"AAAA,SAASA,0BAA0BC,GAC3BC,EAAaC,aAAaC,QAAQH,CAAG,EAC3C,OAAOC,EAAaG,KAAKC,MAAMJ,CAAU,EAAI,IAC/C,CAEA,SACEK,2BAAAC,EAAAC,GAEA,IAAIC,EAAOC,0BAAeH,CAAA,EAAEE,EAAGC,EAAY,CAAA,GAAAA,EAAA,GAAAF,CAAA,EAAAA,EAIrCP,GAHNU,QADgDH,OAAAA,EAAAA,WAAAA,oBAAAA,CAAAA,EAI7BJ,KAAKQ,UAAUH,CAAI,GADtCP,aAAAW,QAAAN,EAAAN,CAAA,CAGF,CAAA,SAAAa,aAEAC,EAAA,aAASD,EAAUA,GAAG,QAAA,WAClBE,OAAAC,WAAkB,CAEpB,CAAC,CACH,CAyBA,SAGEC,uBAAsBC,EAAAC,GAFtBC,IAGEC,EADF,SAASC,IAKPD,aAAUE,CAAU,EAApBF,EAOIF,WAAY,WACdT,QAAAc,IACCN,sDACLA,EAAA,IANQ,YAQR,EACsB,YAAtB,OAASO,GACPH,EAAY,CALZ,EAAGJ,CAAQ,CAQb,CASAjB,EAAAA,QAAAA,EAAYyB,GAACC,mBANb,WACAL,EAAY,CACd,CAIsB,EALpBA,EAAW,CACb,CAEA,SAASM,oBACPlB,QAAQc,IAAI,0BAA0B,EACtCvB,aAAa0B,MAAM,CACrB,CA1DAb,EAAEe,QAAQ,EAAEC,MAAM,WAChBjB,WAAW,EAIXC,EAAE,MAAM,EAAEY,GAAG,oBAAqB,SAAUK,EAAGzB,EAAYC,GACzDF,2BAA2BC,EAAYC,CAAO,CAChD,CAAC,EAEDO,EACE,MAAMkB,EAAAA,GAAI,OAAGlC,SAAAA,EAAAA,GACbiB,IAAMiB,EAACC,0BAA8B,MAAA,EACrCV,OAAAA,cAAiBS,EAAAE,CAAA,EAAjBX,WACWY,KACVC,SAASD,KAAK,CACf,EAAA,GAAA,CAAF,CAAC,CAQH,CAAA","file":"gamecontrol.js","sourcesContent":["function getObjectFromLocalStorage(key) {\n  const jsonString = localStorage.getItem(key);\n  return jsonString ? JSON.parse(jsonString) : null;\n}\n\nfunction checkAndSaveOrUpdateObject(storageKey, newData) {\n  // Recuperar o objeto do localStorage\n  const storedObject = getObjectFromLocalStorage(storageKey);\n  let data = storedObject ? { ...storedObject, ...newData } : newData;\n  console.log(`${storedObject ? \"Updating\" : \"Creating\"} stored`, data);\n\n  // Salvar o objeto atualizado ou novo no localStorage\n  const jsonString = JSON.stringify(data);\n  localStorage.setItem(storageKey, jsonString);\n}\n\nfunction fullscreen() {\n  $(\".fullscreen\").on(\"click\", function () {\n    bridge.fullScreen();\n  });\n}\n\n$(document).ready(function () {\n  fullscreen();\n\n  // navigate.goto(`01_capa`); /// sempre abre o curso na capa\n\n  $(\"body\").on(\"setOrUpdateObject\", function (e, storageKey, newData) {\n    checkAndSaveOrUpdateObject(storageKey, newData);\n  });\n\n  $(\"body\").on(\"quiz\", function (e, questions) {\n    const user = getObjectFromLocalStorage(\"user\");\n    bridge.handlerGameDB(user, questions);\n    setTimeout(() => {\n      navigate.next();\n    }, 1000 * 0.12);\n  });\n\n  // setupInactivityChecker(1000 * 50, function () {\n  //   navigate.goto(`01_capa`);\n  //   // Coloque aqui qualquer outra ação que você deseja executar após 30 segundos de inatividade\n  // });\n});\n\nfunction setupInactivityChecker(interval, onInactive) {\n  let timeout;\n\n  function startTimer() {\n    // Clear any existing timeout to avoid multiple timers running\n    clearTimeout(timeout);\n\n    // Set a new timeout to check for inactivity after the specified interval\n    timeout = setTimeout(function () {\n      console.log(\n        \"Nenhuma interação do usuário detectada nos últimos \" +\n          interval / 1000 +\n          \" segundos.\"\n      );\n      if (typeof onInactive === \"function\") {\n        onInactive();\n      }\n    }, interval); // Intervalo em milissegundos\n  }\n\n  // Função para resetar o timer a cada clique ou toque\n  function resetTimer() {\n    startTimer();\n  }\n\n  // Escute os eventos de clique e toque em todo o documento\n  $(document).on(\"click touchstart\", resetTimer);\n\n  // Inicie o timer inicialmente quando a página carregar\n  startTimer();\n}\n\nfunction clearLocalStorage() {\n  console.log(\"entrou clearLocalStorage\");\n  localStorage.clear();\n}\n"]}